
--------------------------------------------------------------------------------
-- Packages with generic utility functions and procedures
/***
alter session set current_schema=SMBDB_SYS;
@@orausers.sql
@@dbasys.pkg
@@dbaver.pkg

-- Application Packages with generic utility functions and procedures
@@SMBDB_SYS_PCK.sql

-- return number from current timestamp for obj unique identifiers
@@SMBDB_SYS_FNC.sql
***/
--------------------------------------------------------------------------------
DROP SEQUENCE "SMBDB_SYS"."T$DEF_SEQ";
DROP SEQUENCE "SMBDB_SYS"."T$OBJ_ID_SEQ";
DROP SEQUENCE "SMBDB_SYS"."M$OBJ_TYPEID_SEQ";
DROP SEQUENCE "SMBDB_SYS"."M$OBJ_ATTRID_SEQ";
DROP SEQUENCE "SMBDB_SYS"."M$OBJ_PROPID_SEQ";
DROP SEQUENCE "SMBDB_SYS"."M$OBJ_CTXID_SEQ";
DROP SEQUENCE "SMBDB_SYS"."T$OBJDEF_SEQ";

drop table "SMBDB_SYS"."T$OBJDEF" cascade constraints purge;
drop table "SMBDB_SYS"."T$OBJLIB" cascade constraints purge;
drop table "SMBDB_SYS"."T$OBJ" cascade constraints purge;
drop table "SMBDB_SYS"."T$ATTR" cascade constraints purge;
drop table "SMBDB_SYS"."T$TYPE" cascade constraints purge;
drop table "SMBDB_SYS"."T$CTX" cascade constraints purge;
drop table "SMBDB_SYS"."T$DEF" cascade constraints purge;
drop table "SMBDB_SYS"."T$PROP" cascade constraints purge;
drop table "SMBDB_SYS"."T$SEC" cascade constraints purge;
drop table "SMBDB_SYS"."M$OBJ_ATTR" cascade constraints purge;
drop table "SMBDB_SYS"."M$OBJ_PROP" cascade constraints purge;
drop table "SMBDB_SYS"."M$OBJ_TYPE" cascade constraints purge;
drop table "SMBDB_SYS"."M$OBJ_CTX" cascade constraints purge;

--------------------------------------------------------------------------------
-- Object Library to hold initial data
CREATE TABLE "SMBDB_SYS"."T$OBJLIB" (
  "OBJLIB_ID" NUMBER NOT NULL
, "OBJ_NAME" VARCHAR2(512) NOT NULL
, "OBJ_CODE" VARCHAR2(12) -- only set if its system object
) TABLESPACE "SMBDB_SYS" LOGGING;

CREATE UNIQUE INDEX "SMBDB_SYS"."T$OBJ_LIB_UQ" ON "SMBDB_SYS"."T$OBJLIB"
(UPPER("OBJ_NAME"), UPPER("OBJ_CODE")) TABLESPACE "SMBDB_IDX";

INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (0, 'DEFAULT', 'DEF');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (1, 'OBJECT', 'OBJ');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (2, 'CONTEXT', 'CTX');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (3, 'TYPE', 'TYPE');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (4, 'ATTRIBUTE', 'ATTR');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (5, 'PARAMETER', 'PARAM');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (6, 'PROPERTY', 'PROP');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (7, 'GROUP', 'GRP');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (8, 'MEMBER', 'MBR');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (9, 'MESSAGE', 'MSG');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (10, 'REFERENCE', 'REF');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (11, 'CONFIGURATION', 'CFG');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (12, 'APPLICATION', 'APP');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (13, 'SYSTEM', 'SYS');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (14, 'MODULE', 'MOD');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (15, 'PROGRAM', 'PRG');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (16, 'SUBCONTEXT', 'SUBCTX');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (17, 'SUBTYPE', 'SUBTYPE');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (18, 'SUBTYPE1', 'SUBTYPE1');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (19, 'SUBTYPE2', 'SUBTYPE2');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (20, 'SUBTYPE3', 'SUBTYPE3');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (21, 'SUBTYPE4', 'SUBTYPE4');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (22, 'SUBTYPE5', 'SUBTYPE5');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (23, 'SUBCONTEXT1', 'SUBCTX1');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (24, 'SUBCONTEXT2', 'SUBCTX2');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (25, 'SUBCONTEXT3', 'SUBCTX3');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (26, 'SUBCONTEXT4', 'SUBTX4');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (27, 'SUBCONTEXT5', 'SUBTX5');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (28, 'ITEM', 'ITM');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (29, 'SUB', 'SUB');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (22, 'PROCESS', 'PRC');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (23, 'METHOD', 'MTHD');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (24, 'CATEGORY', 'CAT');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (25, 'CATALOG', 'CATLG');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (26, 'LIBRARY', 'LIB');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (27, 'ENTRY', 'ENTR');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (28, 'RECORD', 'REC');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (29, 'IDENTITY', 'ID');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (31, 'AUTHORIZATION', 'AUT');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (32, 'AUTHENTIFICATION', 'AUTH');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (33, 'SECURITY', 'SEC');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (34, 'AUDIT', 'AUD');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (36, 'FOLDER', 'FLDR');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (37, 'DIRECTORY', 'DIR');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (38, 'SCHEDULE', 'SCHED');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (39, 'EXECUTABLE', 'EXE');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (40, 'CONDITION', 'COND');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (41, 'DATABASE', 'RDBMS');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (42, 'SQL', 'SQL');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (43, 'USER', 'USR');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (44, 'SOURCE', 'SRC');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (45, 'TABLE', 'TAB');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (46, 'COLUMN', 'COL');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (47, 'INDEX', 'IDX');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (48, 'SCHEMA', 'SCHEMA');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (49, 'DATATYPE', 'DTYPE');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (50, 'SCRIPT', 'SCR');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (51, 'COMMAND', 'CMD');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (52, 'RETURN', 'RET');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (53, 'INPUT', 'INP');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (54, 'OUTPUT', 'OUTP');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (55, 'REPORT', 'REP');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (56, 'LIST', 'LST');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (57, 'REALM', 'REALM');
INSERT INTO "SMBDB_SYS"."T$OBJLIB" VALUES (57, 'OBJECT_TYPE', 'OBJTYPE');

COMMIT;

--------------------------------------------------------------------------------
-- Tables
------------------------------------------------------------------------
-- Types
BEGIN
    SMBDB_SYS.SYSADM.CREATE_OBJ_TAB('TYPE', replace_if_exists => true);
END;
/

INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'APPLICATION');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'SYSTEM');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'OBJECT');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'TYPE');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'CONTEXT');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'SECURITY');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'MODULE');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'METHOD');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'DATABASE');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'ATTRIBUTE');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'PROPERTY');
INSERT INTO  "SMBDB_SYS"."T$TYPE" VALUES ("SMBDB_SYS"."T$TYPE_ID_SEQ".NEXTVAL, 'PARAMETER');

COMMIT;

--------------------------------------------------------------------------------
-- Context
BEGIN
    SMBDB_SYS.SYSADM.CREATE_OBJ_TAB('CTX', replace_if_exists => true);
END;
/

INSERT INTO "SMBDB_SYS"."T$CTX" VALUES ("SMBDB_SYS"."T$CTX_ID_SEQ".NEXTVAL, 'APPLICATION');
INSERT INTO "SMBDB_SYS"."T$CTX" VALUES ("SMBDB_SYS"."T$CTX_ID_SEQ".NEXTVAL, 'DATABASE');
INSERT INTO "SMBDB_SYS"."T$CTX" VALUES ("SMBDB_SYS"."T$CTX_ID_SEQ".NEXTVAL, 'SYSTEM');
INSERT INTO "SMBDB_SYS"."T$CTX" VALUES ("SMBDB_SYS"."T$CTX_ID_SEQ".NEXTVAL, 'USER');
INSERT INTO "SMBDB_SYS"."T$CTX" VALUES ("SMBDB_SYS"."T$CTX_ID_SEQ".NEXTVAL, 'ROLE');
INSERT INTO "SMBDB_SYS"."T$CTX" VALUES ("SMBDB_SYS"."T$CTX_ID_SEQ".NEXTVAL, 'SCHEMA');
INSERT INTO "SMBDB_SYS"."T$CTX" VALUES ("SMBDB_SYS"."T$CTX_ID_SEQ".NEXTVAL, 'MODULE');
INSERT INTO "SMBDB_SYS"."T$CTX" VALUES ("SMBDB_SYS"."T$CTX_ID_SEQ".NEXTVAL, 'SESSION');

COMMIT;

--------------------------------------------------------------------------------
-- Attributes
BEGIN
    SMBDB_SYS.SYSADM.CREATE_OBJ_TAB('ATTR', replace_if_exists => true);
END;
/

INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES (0, 'DEFAULT');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'STATUS');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'PROTECTED');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'SYSOBJECT');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'ONLINE');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'ENABLED');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'VISIBLE');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'SINGLE_USER');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'READ_ONLY');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'WRITABLE');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'CUSTOM');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'LEVEL');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'RANK');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'LANGUAGE');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'SIZE');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'COLOR');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'HEIGHT');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'WIDTH');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'DEPTH');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'AGE');
INSERT INTO "SMBDB_SYS"."T$ATTR" VALUES ("SMBDB_SYS"."T$ATTR_ID_SEQ".NEXTVAL, 'GENDER');

COMMIT;

--------------------------------------------------------------------------------
-- Properties
BEGIN
    SMBDB_SYS.SYSADM.CREATE_OBJ_TAB('PROP', replace_if_exists => true);
END;
/

INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'ID');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'NAME');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'DESCRIPTION');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'CREATED');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'CREATED_BY');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'LAST_MODIFIED');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'MODIFIED_BY');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'UPDATE_COMMENT');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'VERSION');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'OWNER');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'TYPE');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'UNIT');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'CODE');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'SYSGUID');
INSERT INTO "SMBDB_SYS"."T$PROP" VALUES ("SMBDB_SYS"."T$PROP_ID_SEQ".NEXTVAL, 'LANGUAGE');

COMMIT;

--------------------------------------------------------------------------------
-- Defaults
DROP  TABLE "SMBDB_SYS"."T$DEF" CASCADE CONSTRAINTS PURGE;

CREATE TABLE "SMBDB_SYS"."T$DEF" (
  "DEF_ID" NUMBER NOT NULL
, "OBJ_DEFAULT" VARCHAR2(512) -- default for object
, "OBJ_DIM" VARCHAR2(12) -- dimension
, "OBJ_DIM_ID" NUMBER -- default dimensions
, "VALUE" VARCHAR2(1000) -- default values
, CONSTRAINT "T$DEFAULT_PK" PRIMARY KEY ("DEF_ID"));

DROP SEQUENCE  "SMBDB_SYS"."T$DEF_SEQ";
CREATE SEQUENCE "SMBDB_SYS"."T$DEF_SEQ" START WITH 1 INCREMENT BY 1;

/****
INSERT INTO "SMBDB_SYS"."T$DEF" (SELECT "SMBDB_SYS"."T$DEF_SEQ".NEXTVAL, 'APPLICATION', 'TYPE', TYPE_ID, NULL FROM "T$TYPE" );
INSERT INTO "SMBDB_SYS"."T$DEF" (SELECT "SMBDB_SYS"."T$DEF_SEQ".NEXTVAL, 'APPLICATION', 'CTX', CTX_ID, NULL FROM "T$CTX" );
INSERT INTO "SMBDB_SYS"."T$DEF" (SELECT "SMBDB_SYS"."T$DEF_SEQ".NEXTVAL, 'APPLICATION', 'ATTR', ATTR_ID, NULL FROM "T$ATTR" );
INSERT INTO "SMBDB_SYS"."T$DEF" (SELECT "SMBDB_SYS"."T$DEF_SEQ".NEXTVAL, 'APPLICATION', 'PROP', PROP_ID, NULL FROM "T$PROP" );

-- Application Defaults
CREATE OR REPLACE VIEW "SMBDB_SYS"."V$APP_DEFAULTS"
AS
select   a.obj_default "OBJECT_NAME"
          , a.obj_dim "DEFAULT_TYPE"
          , "SYSADM"."GET_VAL"(a.obj_dim_id, a.obj_dim) "DEFAULT_PARAMETER"
          , A.VALUE "DEFAULT_VALUE"
FROM T$DEF a
where a.obj_default = 'APPLICATION';

CREATE OR REPLACE SYNONYM "APPLICATION_DEFAULTS" FOR "SMBDB_SYS"."V$APP_DEFAULTS";

select * from application_defaults;
***/

INSERT INTO "SMBDB_SYS"."T$DEF"
(SELECT  "SMBDB_SYS"."T$DEF_SEQ".NEXTVAL
            , 'OBJECT'
            , 'TYPE'
            , TYPE_ID
            , NULL
 FROM "T$TYPE"
 WHERE TYPE_NAME IN ('OBJECT'));

INSERT INTO "SMBDB_SYS"."T$DEF"
(SELECT  "SMBDB_SYS"."T$DEF_SEQ".NEXTVAL
            , 'OBJECT'
            , 'CTX'
            , CTX_ID
            , NULL
 FROM "T$CTX"
 WHERE ctx_name IN ('APPLICATION','SYSTEM'));

INSERT INTO "SMBDB_SYS"."T$DEF"
(SELECT   "SMBDB_SYS"."T$DEF_SEQ".NEXTVAL
             , 'OBJECT'
             , 'ATTR'
             , ATTR_ID
             , 1
 FROM "T$ATTR"
 WHERE attr_name IN ('PROTECTED'));


INSERT INTO "SMBDB_SYS"."T$DEF"
(SELECT   "SMBDB_SYS"."T$DEF_SEQ".NEXTVAL
             , 'OBJECT'
             , 'PROP'
             , PROP_ID
             , NULL
 FROM "T$PROP"
 WHERE PROP_NAME IN (  'ID', 'NAME', 'DESCRIPTION'
                                    , 'CREATED', 'CREATED_BY'
                                    , 'LAST_MODIFIED', 'MODIFIED_BY'
                                    , 'VERSION', 'SYSGUID')
                                   );

COMMIT;

-- Object Defaults
CREATE OR REPLACE VIEW "SMBDB_SYS"."V$OBJ_DEFAULTS"
AS
select   a.obj_default "OBJECT_NAME"
          , a.obj_dim "DEFAULT_TYPE"
          , "SYSADM"."GET_VAL"(a.obj_dim_id, a.obj_dim) "DEFAULT_PARAMETER"
          , A.VALUE "DEFAULT_VALUE"
FROM T$DEF a
where a.obj_default = 'OBJECT';

CREATE OR REPLACE SYNONYM "OBJECT_DEFAULTS" FOR "SMBDB_SYS"."V$OBJ_DEFAULTS";

--select * from object_defaults;
--
--update object_defaults
--set default_value = 'SYSDATE'
--where default_parameter = 'LAST_MODIFIED';
--commit;
--------------------------------------------------------------------------------
-- Security
BEGIN
    SMBDB_SYS.SYSADM.CREATE_OBJ_TAB('SEC', replace_if_exists => true);
END;
/

--------------------------------------------------------------------------------
-- Object -- all Objects are created here
/***
DROP  TABLE "SMBDB_SYS"."T$OBJ" CASCADE CONSTRAINTS PURGE;
CREATE TABLE "SMBDB_SYS"."T$OBJ" (
  "OBJ_ID" NUMBER  NOT NULL
, "OBJ_PID" NUMBER  -- parent id
, "TYPE_ID1" NUMBER  NOT NULL
, "TYPE_ID2" NUMBER
, "TYPE_ID3" NUMBER
, "CTX_ID1" NUMBER NOT NULL
, "CTX_ID2" NUMBER
, "CTX_ID3" NUMBER
, "REF_ID1" NUMBER  -- external references from other tables or maps
, "REF_ID2" NUMBER
, "REF_ID3" NUMBER
, "OBJ_SYSGUID" NUMBER(32) -- unique identifier for system objects
, CONSTRAINT "T$OBJ_PK" PRIMARY KEY ("OBJ_ID")
, CONSTRAINT "T$OBJ_TYPE1_FK" FOREIGN KEY ("TYPE_ID1") REFERENCES "SMBDB_SYS"."T$TYPE" ("TYPE_ID")
, CONSTRAINT "T$OBJ_TYPE2_FK" FOREIGN KEY ("TYPE_ID2") REFERENCES "SMBDB_SYS"."T$TYPE" ("TYPE_ID")
, CONSTRAINT "T$OBJ_TYPE3_FK" FOREIGN KEY ("TYPE_ID3") REFERENCES "SMBDB_SYS"."T$TYPE" ("TYPE_ID")
, CONSTRAINT "T$OBJ_CTX1_FK" FOREIGN KEY ("CTX_ID1") REFERENCES "SMBDB_SYS"."T$CTX" ("CTX_ID")
, CONSTRAINT "T$OBJ_CTX2_FK" FOREIGN KEY ("CTX_ID2") REFERENCES "SMBDB_SYS"."T$CTX" ("CTX_ID")
, CONSTRAINT "T$OBJ_CTX3_FK" FOREIGN KEY ("CTX_ID3") REFERENCES "SMBDB_SYS"."T$CTX" ("CTX_ID")
) TABLESPACE "SMBDB_SYS" LOGGING;

ALTER TABLE "SMBDB_SYS"."T$OBJ" ADD CONSTRAINT "T$OBJ_FK" FOREIGN KEY ("OBJ_PID") REFERENCES "SMBDB_SYS"."T$OBJ" ("OBJ_ID");

CREATE INDEX "SMBDB_SYS"."FK_OBJPID_IDX" ON "SMBDB_SYS"."T$OBJ" ("OBJ_PID") TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_TYPE1_IDX" ON "SMBDB_SYS"."T$OBJ" ("TYPE_ID1" ) TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_TYPE2_IDX" ON "SMBDB_SYS"."T$OBJ" ("TYPE_ID2" ) TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_TYPE3_IDX" ON "SMBDB_SYS"."T$OBJ" ("TYPE_ID3" ) TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_CTX1_IDX" ON "SMBDB_SYS"."T$OBJ" ("CTX_ID1" ) TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_CTX2_IDX" ON "SMBDB_SYS"."T$OBJ" ("CTX_ID2" ) TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_CTX3_IDX" ON "SMBDB_SYS"."T$OBJ" ("CTX_ID3" ) TABLESPACE "SMBDB_IDX";

CREATE INDEX "SMBDB_SYS"."OBJ_SYSGUID_IDX" ON "SMBDB_SYS"."T$OBJ" (CASE WHEN "OBJ_SYSGUID" IS NOT NULL
                                                                                                               THEN "OBJ_SYSGUID"
                                                                                                       END) TABLESPACE "SMBDB_IDX";
***/
DROP  TABLE "SMBDB_SYS"."T$OBJ_TYPES" CASCADE CONSTRAINTS PURGE;
-- object types
CREATE TABLE "SMBDB_SYS"."T$OBJ_TYPES" (
  "OBJ_TYPE_ID" NUMBER  NOT NULL
, "OBJ_TYPE_PID" NUMBER  -- parent id
, "OBJ_TYPE_SYSGUID" NUMBER(32) -- unique identifier for system objects
, "TYPE_NAME" VARCHAR2(128 char)
, "TYPE_VALUE" VARCHAR2(128 char) DEFAULT NULL
, CONSTRAINT "T$OBJTYPES_PK" PRIMARY KEY ("OBJ_TYPE_ID")
);

CREATE INDEX "SMBDB_SYS"."OBJTYPE_SYSGUID_IDX" ON "SMBDB_SYS"."T$OBJ_TYPES" (
CASE WHEN "OBJ_TYPE_SYSGUID" IS NOT NULL
THEN "OBJ_TYPE_SYSGUID"
END) TABLESPACE "SMBDB_IDX";

DROP SEQUENCE "SMBDB_SYS"."T$OBJ_TYPE_ID_SEQ";
CREATE SEQUENCE "SMBDB_SYS"."T$OBJ_TYPE_ID_SEQ"  START WITH 1 INCREMENT BY 1 NOCACHE;

INSERT INTO "SMBDB_SYS"."T$OBJ_TYPES" (obj_type_id, obj_type_sysguid, type_name)
(select 0, objuid, obj_name
 from t$objlib
 where obj_name = 'DEFAULT');

INSERT INTO "SMBDB_SYS"."T$OBJ_TYPES" (obj_type_id, obj_type_sysguid, type_name)
(select "SMBDB_SYS"."T$OBJ_TYPE_ID_SEQ".NEXTVAL, objuid, obj_name
 from t$objlib
 where obj_name != 'DEFAULT');

COMMIT;

CREATE OR REPLACE TRIGGER "SMBDB_SYS"."T$OBJ_TYPE_ID_TRG"
BEFORE INSERT ON "SMBDB_SYS"."T$OBJ_TYPES" FOR EACH ROW
BEGIN
    select "T$OBJ_TYPE_ID_SEQ".NEXTVAL into :new.obj_type_id from dual;
EXCEPTION WHEN OTHERS THEN
raise;
END;
/

DROP TABLE "SMBDB_SYS"."T$OBJ" CASCADE CONSTRAINTS PURGE;
-- object table
CREATE TABLE "SMBDB_SYS"."T$OBJ" (
  "OBJ_ID" NUMBER  NOT NULL
, "OBJ_PID" NUMBER  -- parent id
, "OBJ_NAME" VARCHAR2(128) NOT NULL
, "OBJ_CODE" VARCHAR2(12 char)
, "OBJ_TYPE_ID" NUMBER DEFAULT 0
, "REF_ID1" NUMBER  -- external references from other tables or maps
, "REF_ID2" NUMBER
, "REF_ID3" NUMBER
, "OBJ_SYSGUID" NUMBER(32) -- unique identifier for system objects
, CONSTRAINT "T$OBJ_PK" PRIMARY KEY ("OBJ_ID")
, CONSTRAINT "T$OBJ_TYPE_ID_FK" FOREIGN KEY ("OBJ_TYPE_ID")
  REFERENCES "SMBDB_SYS"."T$OBJ_TYPES" ("OBJ_TYPE_ID") ON DELETE CASCADE
);

CREATE INDEX "SMBDB_SYS"."OBJ_SYSGUID_IDX" ON "SMBDB_SYS"."T$OBJ" (
CASE WHEN "OBJ_SYSGUID" IS NOT NULL
THEN "OBJ_SYSGUID"
END) TABLESPACE "SMBDB_IDX";

DROP SEQUENCE "SMBDB_SYS"."T$OBJ_ID_SEQ";
CREATE SEQUENCE "SMBDB_SYS"."T$OBJ_ID_SEQ"  START WITH 1 INCREMENT BY 1 NOCACHE;

INSERT INTO "SMBDB_SYS"."T$OBJ" (obj_id, obj_name, obj_code, obj_type_id, obj_sysguid)
(select    obj_type_id, type_name, (select obj_code from T$OBJLIB where obj_name = type_name)
            , (select obj_type_id from t$obj_types where type_name = 'OBJECT_TYPE')
            , objuid
 from t$obj_types
 where type_name = 'DEFAULT');

INSERT INTO "SMBDB_SYS"."T$OBJ" (obj_id, obj_name, obj_code, obj_type_id, obj_sysguid)
(select    "T$OBJ_ID_SEQ".NEXTVAL, type_name,  (select obj_code from T$OBJLIB where obj_name = type_name)
            , (select obj_type_id from t$obj_types where type_name = 'OBJECT_TYPE')
            , objuid
 from t$obj_types
 where type_name != 'DEFAULT');

commit;

CREATE OR REPLACE TRIGGER "SMBDB_SYS"."T$OBJ_ID_TRG"
BEFORE INSERT ON "SMBDB_SYS"."T$OBJ" FOR EACH ROW
declare
l_obj_type_id number;
BEGIN
    select "T$OBJ_ID_SEQ".NEXTVAL into :new.obj_id from dual;
    -- register object in lib first
    BEGIN
      insert into "T$OBJLIB" VALUES (:new.obj_id, :new.obj_name, :new.obj_code);
    EXCEPTION WHEN dup_val_on_index THEN
      update "T$OBJLIB" set objlib_id = :new.obj_id, obj_name = :new.obj_name
      where upper(obj_name) = upper(:new.obj_name)
      and upper(obj_code) = upper(:new.obj_code);
    END;
    -- object types
    begin
      select obj_id into l_obj_type_id
      from "SMBDB_SYS"."T$OBJ"
      where obj_name = 'OBJECT_TYPE';
      if :new.obj_type_id = l_obj_type_id then
        insert into "SMBDB_SYS"."T$OBJ_TYPES" (obj_type_sysguid, type_name)
        values (objuid, :new.obj_name);
      end if;
    end;
    -- package call goes here ---
END;
/

create or replace view "SMBDB_SYS"."V$OBJECT" (
object_id, object_name, object_code, object_type, parent_id, sysguid)
as
select a.obj_id, a.obj_name, a.obj_code, b.type_name, a.obj_pid, a.obj_sysguid
from "SMBDB_SYS"."T$OBJ" a join "SMBDB_SYS"."T$OBJ_TYPES" b
on a.obj_type_id = b.obj_type_id;

--constrained view constraint v$objtype_pk primary key (object_id)
create or replace view "SMBDB_SYS"."V$OBJECT_TYPE" (
object_id, type_name, type_value, parent_id, sysguid)
as
select a.obj_id, a.obj_name, b.type_value, a.obj_pid, a.obj_sysguid
from "SMBDB_SYS"."T$OBJ" a join "SMBDB_SYS"."T$OBJ_TYPES" b
on a.obj_type_id = b.obj_type_id
where a.obj_type_id = (select obj_id
                                  from "SMBDB_SYS"."T$OBJ"
                                  where obj_name = 'OBJECT_TYPE');

--------------------------------------------------------------------------------
-- Mapping Tables

--Object Types
CREATE TABLE "SMBDB_SYS"."M$OBJ_TYPE" (
  "OBJTYPE_ID" NUMBER  NOT NULL
, "OBJ_ID" NUMBER
, "TYPE_ID" NUMBER
, CONSTRAINT "M$OBJTYPE_PK" PRIMARY KEY ("OBJTYPE_ID")
, CONSTRAINT "M$OBJTYPE_OBJID_FK" FOREIGN KEY ("OBJ_ID") REFERENCES "SMBDB_SYS"."T$OBJ" ("OBJ_ID")
, CONSTRAINT "M$OBJTYPE_TYPEID_FK" FOREIGN KEY ("TYPE_ID") REFERENCES "SMBDB_SYS"."T$TYPE" ("TYPE_ID")
) TABLESPACE "SMBDB_SYS" LOGGING;

CREATE INDEX "SMBDB_SYS"."FK_OBJTYPE_OBJID_IDX" ON "SMBDB_SYS"."M$OBJ_TYPE" ("OBJ_ID") TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_OBJTYPE_TYPEID_IDX" ON "SMBDB_SYS"."M$OBJ_TYPE" ("TYPE_ID") TABLESPACE "SMBDB_IDX";

CREATE SEQUENCE "SMBDB_SYS"."M$OBJ_TYPEID_SEQ" START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER "SMBDB_SYS"."M$OBJ_TYPEID_TRG"
BEFORE INSERT ON "SMBDB_SYS"."M$OBJ_TYPE" FOR EACH ROW
BEGIN
    select "M$OBJ_TYPEID_SEQ".NEXTVAL into :new.objtype_id from dual;
END;
/

--Object Contexts
CREATE TABLE "SMBDB_SYS"."M$OBJ_CTX" (
  "OBJCTX_ID" NUMBER  NOT NULL
, "OBJ_ID" NUMBER
, "CTX_ID" NUMBER
, CONSTRAINT "M$OBJCTX_PK" PRIMARY KEY ("OBJCTX_ID")
, CONSTRAINT "M$OBJCTX_OBJID_FK" FOREIGN KEY ("OBJ_ID") REFERENCES "SMBDB_SYS"."T$OBJ" ("OBJ_ID")
, CONSTRAINT "M$OBJCTX_CTXID_FK" FOREIGN KEY ("CTX_ID") REFERENCES "SMBDB_SYS"."T$CTX" ("CTX_ID")
) TABLESPACE "SMBDB_SYS" LOGGING;

CREATE INDEX "SMBDB_SYS"."FK_OBJCTX_OBJID_IDX" ON "SMBDB_SYS"."M$OBJ_CTX" ("OBJ_ID") TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_OBJCTX_CTXID_IDX" ON "SMBDB_SYS"."M$OBJ_CTX" ("CTX_ID") TABLESPACE "SMBDB_IDX";

CREATE SEQUENCE "SMBDB_SYS"."M$OBJ_CTXID_SEQ" START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER "SMBDB_SYS"."M$OBJ_CTXID_TRG"
BEFORE INSERT ON "SMBDB_SYS"."M$OBJ_CTX" FOR EACH ROW
BEGIN
    select "M$OBJ_CTXID_SEQ".NEXTVAL into :new.objCTX_id from dual;
END;
/

--Object Attributes
CREATE TABLE "SMBDB_SYS"."M$OBJ_ATTR" (
  "OBJATTR_ID" NUMBER  NOT NULL
, "OBJ_ID" NUMBER
, "ATTR_ID" NUMBER
, CONSTRAINT "M$OBJATTR_PK" PRIMARY KEY ("OBJATTR_ID")
, CONSTRAINT "M$OBJATTR_OBJID_FK" FOREIGN KEY ("OBJ_ID") REFERENCES "SMBDB_SYS"."T$OBJ" ("OBJ_ID")
, CONSTRAINT "M$OBJATTR_ATTRID_FK" FOREIGN KEY ("ATTR_ID") REFERENCES "SMBDB_SYS"."T$ATTR" ("ATTR_ID")
) TABLESPACE "SMBDB_SYS" LOGGING;

CREATE INDEX "SMBDB_SYS"."FK_OBJATTR_OBJID_IDX" ON "SMBDB_SYS"."M$OBJ_ATTR" ("OBJ_ID") TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_OBJATTR_ATTRID_IDX" ON "SMBDB_SYS"."M$OBJ_ATTR" ("ATTR_ID") TABLESPACE "SMBDB_IDX";

CREATE SEQUENCE "SMBDB_SYS"."M$OBJ_ATTRID_SEQ" START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER "SMBDB_SYS"."M$OBJ_ATTRID_TRG"
BEFORE INSERT ON "SMBDB_SYS"."M$OBJ_ATTR" FOR EACH ROW
begin
    select "M$OBJ_ATTRID_SEQ".NEXTVAL into :new.objattr_id from dual;
end;
/

-- Object Properties
CREATE TABLE "SMBDB_SYS"."M$OBJ_PROP" (
  "OBJPROP_ID" NUMBER  NOT NULL
, "OBJ_ID" NUMBER
, "PROP_ID" NUMBER
, CONSTRAINT "M$OBJPROP_PK" PRIMARY KEY ("OBJPROP_ID")
, CONSTRAINT "M$OBJPROP_OBJID_FK" FOREIGN KEY ("OBJ_ID") REFERENCES "SMBDB_SYS"."T$OBJ" ("OBJ_ID")
, CONSTRAINT "M$OBJPROP_PROPID_FK" FOREIGN KEY ("PROP_ID") REFERENCES "SMBDB_SYS"."T$PROP" ("PROP_ID")
) TABLESPACE "SMBDB_SYS" LOGGING;

CREATE INDEX "SMBDB_SYS"."FK_OBJPROP_OBJID_IDX" ON "SMBDB_SYS"."M$OBJ_PROP" ("OBJ_ID") TABLESPACE "SMBDB_IDX";
CREATE INDEX "SMBDB_SYS"."FK_OBJPROP_PROPID_IDX" ON "SMBDB_SYS"."M$OBJ_PROP" ("PROP_ID") TABLESPACE "SMBDB_IDX";

CREATE SEQUENCE "SMBDB_SYS"."M$OBJ_PROPID_SEQ" START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER "SMBDB_SYS"."M$OBJ_PROPID_TRG"
BEFORE INSERT ON "SMBDB_SYS"."M$OBJ_PROP" FOR EACH ROW
BEGIN
    select "M$OBJ_PROPID_SEQ".NEXTVAL into :new.objprop_id from dual;
END;
/

--------------------------------------------------------------------------------
-- Views for visualization
--------------------------------------------------------------------------------

--CREATE OR REPLACE FORCE VIEW "SMBDB_SYS"."OBJECTS" AS
--SELECT
--    a.OBJDETAIL_ID "OBJECT_ID",
--    a.OBJ_SYSGUID "OBJECT_GUID",
--    b.OBJ_NAME "OBJECT_NAME",
--    c.TYPE_NAME "OBJECT_TYPE",
--    d.TYPE_NAME "OBJECT_SUBTYPE1",
--    e.TYPE_NAME "OBJECT_SUBTYPE2",
--    f.CTX_NAME "OBJECT_CONTEXT",
--    g.CTX_NAME "OBJECT_SUBCONTEXT1",
--    h.CTX_NAME "OBJECT_SUBCONTEXT2"
--FROM
--    SMBDB_SYS.T$OBJDETAIL a,
--    SMBDB_SYS.T$OBJ b,
--    SMBDB_SYS.T$TYPE c,
--    SMBDB_SYS.T$TYPE d,
--    SMBDB_SYS.T$TYPE e,
--    SMBDB_SYS.T$CTX f,
--    SMBDB_SYS.T$CTX g,
--    SMBDB_SYS.T$CTX h
--WHERE a.OBJ_ID = b.OBJ_ID
--AND (     a.TYPE_ID1  = c.TYPE_ID(+)
--AND     a.TYPE_ID2   = d.TYPE_ID(+)
--AND     a.TYPE_ID3   = e.TYPE_ID(+))
--AND (    a.CTX_ID1  = f.CTX_ID
--AND     a.CTX_ID2   = g.CTX_ID(+)
--AND     a.CTX_ID3   = h.CTX_ID(+))
--;

--select a.def_id, a.obj_code, b.object_name, a.value
--from x$def a join x$obj b
--ob a.obj_id = b.obj_id;
--------------------------------------------------------------------------------
-- gathering stats
BEGIN
    DBMS_STATS.GATHER_SCHEMA_STATS ('SMBDB_SYS');
END;
/


